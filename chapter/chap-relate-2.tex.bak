\chapter{相关技术背景及技术基础}
\section{引言}
本章将重点介绍虚拟化网络服务的相关技术背景和技术基础。本章内容安排如下：第\ref{sec:relate-yun}节介绍了云计算的概念和相关技术；第\ref{sec:relate-virtual}节介绍了虚拟化技术；第\ref{sec:relate-tc}节简要介绍了网络流量控制相关的技术。
\section{云计算}
\label{sec:relate-yun}
\subsection{什么是云计算}
什么是云计算？这是一个被反复提到、反复回答之后，又反复提出的问题。这种有趣的现象说明云计算是有着强大生命力的技术发展方向。由于云计算本身是一个非常抽象的概念，要想给出云计算的精确定义是非常困难的。不同的人从不同的角度解释了云计算的含义，这些解释都各有各的道理。文献~\cite{cloud1,cloud2}~认为云计算的目标是通过互联网提供各种计算服务和存储服务。云计算安全联盟在文献\cite{cas-cloud}中比较精确地说明了云计算的本质：
\par
“云计算的本质是一种服务提供模型，通过这种模型可以随时、随地、按需地通过网络访问共享资源池的资源，这个资源池的内容包括计算资源、网络资源、存储资源等，这些资源能够被动态地分配和调整，在不同用户之间灵活地划分。凡是符合这些特征的~IT~服务都可以称为云计算服务。”
\par
美国国家标准与技术学院（NIST）提出了一个定义云计算的标准
~\cite{nist-cloud}~，认为一个标准的云计算需要具备五个基本元素：通过网络分发服务、自助服务、可衡量的服务、资源的灵活调度和资源池化。该标准还提到云计算按照服务类型可以分为IaaS、SaaS和PaaS三类，按照部署模式可分为公有云、私有云、混合云和社区云四种。该标准定义的云计算标准展示了如图\ref{fig:nist-cloud} 所示的云计算架构。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{nist-cloud.eps}
\caption{NIST提出的云计算架构}
\label{fig:nist-cloud}
\end{figure}
 \par
美国国家标准与技术学院（NIST）提出的云计算标准被业界普遍接受，该标准提出的云计算五大要素非常简练地说明了一个云计算系统的特征，只有同时具备这五点的~IT~架构才可以被称为云服务架构，通过这五个特征能够快速地将云计算
系统同传统~IT~系统区分开来。
 \subsubsection{云计算的基本元素}
 \textbf{1、自助服务}\par
 云计算与传统架构的区别，从用户开始接触云计算时就体现出来了。在云计算系统中，用户通过自助方式获取服务：自助地挑选服务类型，自助地配置服务，自助地开启或关闭服务。整个过程由用户自助完成，无需云服务提供商的人工干预。自助式的服务方式充分发挥了云计算后台架构强大的运算能力，同时，用户也获得了更加快捷、高效的体验。
 \par
 \textbf{2、通过网络分发服务}\par
 在云计算出现之前，人们使用计算机完成工作的前提是有计算机硬件设备，通过在硬件设备上安装相应的软件程序完成相应的工作。这种一对一的服务方式使得我们获取服务的方式非常单一和死板。云计算通过网络分发服务的方式打破了地理位置的限制、打破了硬件部署环境的限制，只要有网络就有计算，革命性地改变了我们使用计算机的习惯。
 \par
 \textbf{3、资源池化}\par
 传统架构中，计算资源以单台服务器为单位，使得服务器的资源大多时候处于闲置状态，不能得到合理利用，对用户而言，成本开销非常大。云计算打破了服务器机箱的限制，将所有的~CPU~和内存等资源解放出来，汇集到一起，形成一个个~CPU~池、内存池、网络池，当用户产生需求时，便从这个池中配置能够满足需求的组合。资源的池化使得用户不再关心计算资源的物理位置和存在形式，以更加灵活的方式对资源进行配置。
 \par
 \textbf{4、资源的灵活调度}\par
 资源的灵活调度是资源池化的进一步延伸。云计算在资源调度方面的灵活性表现在云计算服务提供商可以非常快速地将新设备添加到资源池中，满足用户不断增长的需求。对用户来说，只需根据自己的业务需求消费相应的资源，而不用担心资源池的负载情况。
 \par
 \textbf{5、可衡量的服务}\par
 一个完整的云计算平台会对存储、CPU、带宽等资源保持实时跟踪，并将这些信息以可量化的指标反映出来。基于这些指标，云计算服务提供商或管理企业内部私有云的~IT~部门，能够快速地对后台资源进行调整和优化。
 \subsubsection{云计算的服务类型}
 \textbf{1、IaaS}\par
 ~IaaS，Infrastructure as a Service，~基础架构即服务。通过虚拟化技术将服务器等计算平台同存储和网络资源打包，通过开放的~API~接口的形式提供给用户。与传统架构相比，用户不用租用机房，不用维护服务器和交换机，只需要购买~IaaS~服务就能够获得这些资源。著名的~IaaS~是~Amazon EC2~。
 \par
 \textbf{2、PaaS}\par
 ~PaaS，Platform as a Service，~平台即服务。~PaaS~构建在~IaaS~之上，在基础架构之外还提供了业务软件的运行环境，通常还具备相应的存储接口供用户调用。~PaaS~面向的用户是没有能力或者不愿意维护一个完整运行环境的开发人员和企事业单位，通过使用~PaaS~服务，他们可以从繁琐的环境搭建中解放出来，将更多的时间和精力投入到业务软件的开发中。著名的~PaaS~包括~Google App Engine~和~Microsoft Azure~等。
\par
 \textbf{3、SaaS}\par
 ~SaaS，Software as a Service，~软件即服务。~SaaS~通过将业务运行的后台环境放入云端，通过瘦客户端，譬如Web浏览器，向终端用户直接提供服务。终端用户按需向云端请求服务，而本地无需维护任何基础架构或软件运行环境。~SaaS~面向的用户是软件产品的终端用户。著名的~SaaS~是~Salesforce.com~ 的云端~CRM~服务。
 \par
 综上所述，~IaaS~处于最底层，提供的是用户直接访问底层计算资源、存储资源和网络资源的能力。~PaaS~基于~IaaS~实现，提供的是软件业务运行的环境。~SaaS~位于~PaaS~之上，将软件以服务的形式通过网络提供给终端用户。这三者的关系可以用如图\ref{fig:iaas-paas-saas}所示的示意图来进行阐述。
\begin{figure}[h]
\centering
\includegraphics[width=0.5\textwidth]{iaas-paas-saas.eps}
\caption{~IaaS~、~PaaS~和~SaaS~的关系}
\label{fig:iaas-paas-saas}
\end{figure}
 \subsubsection{云计算的部署模式}
\textbf{1、私有云}\par
私有云是部署在企业内部，服务于内部用户的云计算类型。私有云的建设、运营和使用都在某个组织或企业内部完成，其服务的对象被限制在这个组织内部，对
外没有公开接口。私有云不对组织外部的用户提供服务，但是私有云的设计、部署与维护可以交由组织外部的第三方完成。
\par
\textbf{2、社区云}\par
社区云是由数个有共同利益关系或目标的企业和组织共同构建的云计算业务，其服务面向这几个组织的内部人员。由大学等教育机构维护的教育云就是一个标准的社区云业务，大学和其他高等机构将自身的教育资源放到云平台上，向校内外的用户提供服务。
\par
\textbf{3、公有云}\par
公有云一般是由云服务运营商搭建，面向公众的云计算类型。公有云通常由一个云服务运营商维护，通过互联网向公众提供服务，任何人都可以申请、使用公有云资源。因此，公有云的规模一般很大，对可靠性、安全性的要求也更高，其基础架构的组成往往也更加复杂。
\par
\textbf{4、混合云}\par
混合云则是包含了两种或两种以上类型的云计算形式。混合云可以是公有云与私有云的混合，也可以是私有云与社区云的混合。混合云服务的对象非常广泛，包括特定组织内部的成员，以及互联网上的开放受众。

\subsection{云计算优势}
和传统的~IT~架构相比，云计算具有鲜明的特点和独特的优势，主要包括：\par
\textbf{1、低成本}\par
低成本是云计算服务的最显著的特点和优势。在云计算以前，搭建~IT~系统需要购置服务器、网络、存储等设备，而在云计算时代，用户不再需要购置任何硬件设备，只需按照业务需求租用云端服务，按需付费，使得~IT~资源随着业务需求的增长而增长、减少而减少，大大降低了成本开销。
\par
\textbf{2、高扩展性}\par
高扩展性是云计算架构的另一个重要特点。传统的~IT~架构扩展起来非常困难，任何细小的扩张都会牵动整个系统，不但要购置大量设备，还要兼顾到和原有系统的兼容性等问题。相反，云计算由于其资源池化和自助式服务特点，用户可以随时随地增减计算资源，且对其上层业务的影响也被限制在最小的范围。
\par
\textbf{3、高可靠性}\par
云计算的高可靠性是由云计算服务提供商的高额投资保障的。数据中心的可靠性与投资一般成正比关系：配置了备用电源的机房肯定比普通机房可靠，而在不同物理地点部署备份机房可以提供的灾难恢复时间一定比单一的数据中心短。然而，并不是每个企业都有能力为数据中心做高额的投资。云计算服务提供商为成千上万的企业提供云计算服务，其数据中心的配备和投资是单个企业无法企及的。
\par
\textbf{4、远程访问}\par
云计算通过网络向用户提供服务，因此，不管用户身处何处，只要有网络遍布，便可对云端服务进行远程访问。
\par
\textbf{5、高服务质量}\par
与高可靠性一样，云计算服务的高服务质量也是由云计算服务提供商的高额投资保障的。
\subsection{云平台}
云平台，又称虚拟化管理软件，通常指的是云计算服务中的基础设施即服务~IaaS~系统。利用云平台可以构建~IaaS~系统，为用户提供基础设施云服务。本节将重点介绍两个目前广泛使用的云计算平台~OpenStack~和~Eucalyptus~。
\subsubsection{OpenStack}
~OpenStack~是由美国国家航空航天局和~Rackspace~合作研发的，以~Apache~ 许可证授权的自由软件和开放源代码项目，提供了一个部署云的操作平台和工具集。~OpenStack~是与~Amazon EC2~ 兼容的~IaaS~系统，由一系列松散耦合的模块和组件组成，主要包括：\par
 \textbf{1）OpenStack Compute（Nova）}\par
~Compute~是~OpenStack~的云控制器，通过该控制器，用户可以进行云系统的部署，包括启动虚拟实例、管理网络、控制外界对云系统的访问等。~Compute~构建在底层开源项目~Nova~上，包含~Web~前端、计算服务、存储服务、身份认证服务、存储块设备服务、网络服务、任务调度等多个模块。~OpenStack Compute~ 的不同模块之间不共享任何信息，通过消息传递进行通讯。因此，不同的模块可以运行在不同的服务器上，也可以运行在同一台服务器上。~OpenStack~通过~Agent~ 的方式来管理计算资源。在每一个计算节点上，都需要运行~nova-network~服务和~nova-compute~服务。这些服务启动之后，就可以通过消息队列与云控制器进行交互。
\par
 \textbf{2）OpenStack Object Storage（Swift）}\par
 OpenStack Object Storage（Swift）是可扩展的对象存储系统，通过内置冗余和容错机制保证数据的安全性。~Swift~对象存储系统支持多种应用，包括复制和存档数据、图像、视频服务，存储静态数据，开发数据存储整合的应用，为~Web~应用创建基于云的弹性存储等。需要注意的是，~Swift~对象存储系统不是文件系统，不能保证数据的实时性。因此，它更适用于存储需要长期保存的静态数据。
 \par
 \textbf{3）OpenStack Image Service（Glance）}\par
 ~Glance~是~OpenStack~的镜像服务系统，其主要功能是管理硬盘和虚拟机镜像，可利用~OpenStack~对象存储机制来存储镜像，也可利用~Amazon S3~简单存储解决方案直接存储信息，或者将~Amazon S3~存储与对象存储结合起来，作为~Amazon S3~访问的连接器。~Glance~镜像服务系统支持多种虚拟机镜像格式，譬如~VMware~镜像~VMDK~，~Amazon~镜像~AKI、ARI、AMI~以及~VirtualBox~支持的各种磁盘格式。
 \par
 \textbf{4）OpenStack Identity（Keystone）}\par
 ~Keystone~是~OpenStack~的认证服务系统，提供身份认证服务和相关的权限管理服务。
 \par
 \textbf{5）OpenStack  Dashboard（Horizon）}\par
 ~Dashboard~是~OpenStack~中提供查看和管理计算、存储、网络资源的图形界面，可简化用户操作，提供用户体验质量。
\par
\subsubsection{Eucalyptus}
~Eucalyptus，即~Elastic Utility Computing Architecture for Linking Your Programs To Useful Systems，是一个与~Amazon EC2~兼容的~IaaS~系统，它可帮助用户完成对各种基于物理设施的虚拟设备的全局性掌控，完成整个集群计算能力的动态配置。~Eucalyptus~包括五个主要组件，组件间使用安全~SOAP~消息相互通信并保持协作，共同提供所需的云服务。
\par
\textbf{1）CLC}\par
 CLC，Cloud Controller，云控制器。~CLC~是整个~Eucalyptus~系统的核心，负责管理整个系统，是所有用户和管理员进入~Eucalyptus~云的主要入口。所有客户机通过基于~SOAP~或~REST~的~API~与~CLC~通信。由~CLC~负责将请求传递给正确的组件，并将这些组件的响应信息反馈给客户机。
 \par
 \textbf{2）Walrus}\par
 ~Walrus~是一个与~Amazon S3~类似的存储服务，主要用于存储虚拟机映像和用户数据。~Eucalyptus~将虚拟机映像文件存储在~Walrus~上。当用户启动一个虚拟机实例的时候，~Eucalyptus~首先将相应的虚拟机映像从~Walrus~拷贝到将要运行该实例的计算节点~NC~上。当用户关闭或重启一个虚拟机实例的时候，对虚拟机所做的修改并不会被写回到~Walrus~上原来的虚拟机映像上，所有对该虚拟机的修改都会丢失。如果用户需要保存修改过的虚拟机，就需要将该虚拟机实例保存为新的虚拟机映像。如果用户需要保存数据，则需要利用存储服务器所提供的弹性块设备来完成。
 \par
 \textbf{3）CC}\par
 CC，Cluster Controller，集群控制器。~CC~是一个集群的前端，负责协调集群内的计算资源，并且管理集群内的网络流量。也就是说，~CC~负责维护运行在系统内的~NC~的全部实例信息，并控制实例的生命周期。通常，启动虚拟实例的请求会被~CC~路由到具有可用资源的~NC~上。
 \par
 \textbf{4）SC}\par
 SC，Storage Controller，存储控制器。~SC~是一个与~Amazon EBS~类似的存储块设备服务，可以用来存储业务数据。
 \par
 \textbf{5）NC}\par
 NC，Node Controller，节点控制器。~NC~是最终的计算节点，通过调用操作系统层的虚拟化技术来启动和关闭虚拟机。在同一个集群内的所有计算节点必须在同一个子网内。在一个集群内通常需要部署一台存储服务器，为该集群内的计算节点提供数据存储服务。~Eucalyptus~通过~Agent~的方式来管理计算资源。在每个计算节点~NC~上，都需要运行一个~eucalyptus-nc~的服务。该服务在集群控制器~CC~上注册后，云控制器~CLC~即可通过集群控制器~CC~将需要运行的虚拟机映像文件拷贝到该计算节点~NC~上运行。\par

\section{虚拟化技术}
\label{sec:relate-virtual}
虚拟化是一个广泛而抽象的概念，本质上讲，虚拟化都是对底层物理资源进行抽象，形成资源池，并进行按需重新分配。虚拟化技术的主要优势在于资源的共享性和隔离性，多个用户可以共享同一个底层物理资源，每个用户在使用虚拟资源时又感觉到自己对资源的独占性和隔离安全性。本节将主要介绍单机虚拟化技术和虚拟连接技术。
\par
\textbf{1、单机虚拟化技术}\par
通过单机虚拟化，用户可以通过虚拟机无缝使用底层的硬件资源，同时屏蔽底层的实现细节，使用户感受到“独占”该资源。目前的单机虚拟化技术主要包括：
\par
1）完全虚拟化\par
完全虚拟化中，存在~Hypervisor~或~Virtual Machine Monitor~，它是管理虚拟机的软件平台。在完全虚拟化中，~Hypervisor~可以看做是运行在底层物理操作系统上的应用软件，它可以构建出一整套虚拟硬件平台，包括CPU、内存、存储以及适配器等。在~Hypervisor~上再根据用户需求安装新的操作系统和需要的应用软件，这样宿主主机的操作系统和客户机的操作系统是完全无关化的。完全虚拟化中的虚拟机的应用程序调用硬件资源时需要经过虚拟机内核，再经过~Hypervisor，再经过宿主主机内核，最后到达底层物理硬件，因此完全虚拟化导致其性能的损失很大，损失可能达到30\%。
\par
2）OS~层虚拟化\par
OS~层虚拟化，又称~Single Kernel Image（SKI）或者~container-based virtualization~。这种虚拟化技术不是虚拟化硬件而是虚拟化操作系统，通过在宿主操作系统中模拟出多个容器，以运行宿主操作系统的多个虚拟机实例。由于所有的虚拟机实例共享内核空间，所以，OS~层虚拟化的性能非常好，效率非常高，出现错误的几率也很小。当然，其缺点也是显而易见的，即虚拟机的操作系统单一，虚拟出来的客户机操作系统跟宿主操作系统是一模一样的。
\par
3）硬件层的虚拟化\par
硬件层的虚拟化通过直接在硬件之上运行虚拟机，虚拟机上再安装操作系统。这种方式隔离性非常好，并且性能出色，通常用在服务器之上。
\par
4）准虚拟化\par
准虚拟化，又称半虚拟化，Para Virtualization。这种虚拟化技术使得客户机操作系统必须进行修改，否则不能运行在虚拟环境中。准虚拟化是完全虚拟化的子集，在硬件和修改后的客户机操作系统之间提供软件接口子集。这种虚拟化能够达到很高的性能，非常接近物理硬件，但是其代价是安全性。~Xen~是准虚拟化的一个很好的例子。
\par
5）软件虚拟化\par
软件虚拟化通过运行服务器程序来操作本地资源，模拟虚拟机。
\par
\textbf{2、虚拟连接技术}\par
虚拟连接技术可以对虚拟机进行连接和路由，目前的虚拟连接方法都是通过在虚拟机上模拟出真实的网络设备来实现的。主要有以下几种方式：\par
1）桥接方式\par
桥接方式依据~OSI~网络模型的链路层的地址，对网络数据包进行转发的过程，工作在~OSI~的第二层的。通常，网桥和交换机都具有这个功能，用来隔离不同的局域网。虚拟机的网卡可以通过静态配置或者~DHCP~分配到一个网络中独立的~IP~，并桥接到主机的物理网卡上，形成一个网桥，所有发送到虚拟机的数据包经过此网桥。在这种方式下，虚拟机的所有网络功能和在网络中的真实机器完全一样。
\par
2）网络地址转换方式\par
通过将私有或保留地址转化为合法~IP~地址的转换技术，它被广泛应用于各种类型~Internet~接入方式和各种类型的网络中。通过网络地址转换，可以将每个虚拟连接的~IP~地址和端口号映射到真实主机的~IP~地址和随机端口号，所有的数据包在发送或接收时都要再经过修改。在这种连接方式中，连接只能由虚拟机发起且只存在于真实机器和虚拟机之间，虚拟机之间是不可见的。
\par
3）内网方式\par
内网方式是在同一主机的虚拟机之间形成一个局域网，与外界完全断开。主机与虚拟机处于不同网段，也不能相互连接。
\par
4）主机方式\par
主机方式在主机中模拟出一张专供虚拟机使用的网卡，所有虚拟机都是连接到该网卡上的，可以通过设置这张网卡来扩展很多功能，比如网卡共享、网卡桥接等。这是最复杂的一种方式，理论上通过设置可以实现前面3种方式所有的功能。

\section{网络流量控制}
\label{sec:relate-tc}
网络流量控制是一种利用软件或硬件的方式来实现对计算机网络流量的控制。它的最主要方法是引入~QoS~的概念，通过为不同类型的网络数据包标记，并决定不同标记的数据包通行的优先次序。一般来说，进行网络流量控制的措施主要包括以下几种：\par
\textbf{1）流量整形}
\par
流量整形是一种主动调整流量输出速率的措施。流量整形通过限制流出某一网络的某一连接的流量，有效地控制其传输速率，使得这类报文以比较均匀的速度向外发送。流量整形可以很好地平滑突发数据流量，使网络更加稳定。它通常利用缓冲区和令牌桶来完成流量整形：当报文的发送速度过快时，首先在缓冲区中进行缓存，在令牌桶的控制下再均匀地发送这些被缓冲的报文。流量整形的缓存能够对数据包流量的完整性有较好的保存，但缓存也引入了延迟。一般而言，流量整形只适用于从网络接口向外发送的流量。
\par
\textbf{2）流量调度}
\par
流量调度通过在输入和输出之间设定一个队列，让数据包在队列中排队，并重新安排数据包被发送的方式和顺序。通过调度数据包的传输，可以在带宽范围内，按照优先级分配带宽。常见的调度策略是~FIFO~先进先出策略，几乎不用对数据包做任何处理，数据包按照它们到达的顺序依次发送。一般而言，流量调度也只适用于从网络接口向外发送的流量。
\par
\textbf{3）流量监管}
\par
流量监管的功能类似于流量整形，但是，流量监管不仅可以限制从网络接口流出的流量，而且可以限制流入网络接口的流量。流量监控的控制策略主要是丢包和重新标记，它不存在缓冲区或队列。当某个连接的报文流量过大时，流量监管通常是直接丢弃超额流量或是将超额流量标记为低优先级。因此，流量整形和流量监管的重要区别是，流量整形可能会因为对数据包流量的缓存而增加延迟，而监管则几乎不引入额外的延迟。
\par
\textbf{4）丢弃策略}
\par
通过丢弃包、流量来实现对流量的控制，通常在流量超过某个设定的带宽时就会采取丢弃措施。它不仅可以对从网络中流出去的流量实施管理，还可以丢弃流入网络中的流量，从而实现网络流量的控制和平滑等。




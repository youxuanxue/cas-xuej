\chapter{SuperNova~系统工程开发}
\section{引言}
SuperNova~是一个层次结构的服务虚拟化平台，它通过屏蔽底层硬件设备并隐藏实现细节，以开放接口~API~的方式向应用提供所需的服务，而应用无需了解底层的硬件情况和具体的实现细节，根据业务的需求便可获得弹性服务。SuperNova~服务虚拟化平台提供一种基于服务虚拟化、具有云服务特征、开放接口的网络系统及实现方法，通过将分布在不同地理位置的物理设备连接起来，采用虚拟化技术以大粒度服务的形式对外提供资源，从而达到多种业务共享硬件资源，满足用户对媒体业务的服务质量需求。
\par
SuperNova~系统的工程开发工作主要包括以下几个部分：\par
1、将第\ref{chap:vne}章所述的面向媒体业务的虚拟网络嵌入系统应用到~SuperNova~服务虚拟化平台中，以有效地提高资源嵌入映射的效率和底层物理资源的利用率以及长期收益。
\par
2、将第\ref{chap:tc}章所述的业务流量隔离和控制系统应用到~SuperNova~服务虚拟化平台中，以隔离系统中不同的业务流量，并区分不同特征的数据流量，通过流量控制以提供有~QoS~保障的服务。
\par
3、完善~SuperNova~服务虚拟化平台的功能，提供可视化操作方式，简化业务消息处理流程，提高用户体验质量。
\par
本章的内容安排如下：第~\ref{sec:supernova-supernova}~节介绍了~SuperNova~服务虚拟化平台的系统架构和编程架构；第~\ref{sec:supernova-tc}~节详细阐述了~SuperNova~服务虚拟化平台的业务流量隔离和控制模块，不仅包括编程架构和实现细节，还包括功能接口和使用方式；第~\ref{sec:supernova-vne}~节详细阐述了虚拟网络嵌入模块在~SuperNova~服务虚拟化平台上的工程实现，主要包括对该模块的工程设计简化，工程开发实现流程，以及功能接口和使用方式。第~\ref{sec:supernova-other}~节介绍了~SuperNova~服务虚拟化平台的云控制器模块，通过完善云控制器的功能以简化消息处理流程并提高用户体验质量；第~\ref{sec:supernova-conclude}~节对本章的内容进行总结。
\section{SuperNova}
\label{sec:supernova-supernova}
\subsection{系统架构}
SuperNova~服务虚拟化平台的系统架构示意图如图~\ref{fig:supernova-jiagou5}~所示。由此可知，该平台主要包括~4~ 大层次部分：物理设备层，统一的服务虚拟、控制和支撑层，服务和应用层，全局认知管理平台。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{supernova-jiagou.eps}
\caption{SuperNova~系统架构示意图}
\label{fig:supernova-jiagou5}
\end{figure}
\par
其中，物理设备层是众多物理服务器的集合。物理设备层统一向上层提供以节点为单位的信息，包括每个节点的资源状态和使用情况。服务和应用层是指业务和应用系统的集合，由统一的服务虚拟、控制和支撑层向其提供服务能力。统一的服务虚拟、控制和支撑层是~SuperNova~的核心层，它连接了物理设备层和服务应用层，通过屏蔽物理设备层的服务器硬件设备，并以接口的方式向服务和应用层提供所需服务，因此，应用无需了解底层的网络细节和硬件情况，可根据具体的业务和应用需求获得弹性服务。在~SuperNova~中，全局认知管理平台具有全局监控、优化和反馈驱动的功能，对于优化并提高系统性能有重要的作用。
\par
下面将详细介绍~SuperNova~服务虚拟化平台中的各个层次组件。
\subsubsection{物理设备层}
物理设备层对物理服务器硬件设备进行管理和抽象，生成、实现不同的服务类型，并向统一的服务虚拟、控制和支撑层提供具有不同能力的节点信息。这些信息作为服务虚拟化平台的输入，服务虚拟化平台将这些节点组织为一个可针对不同服务类型进行扩展的虚拟服务网。
\subsubsection{统一的服务虚拟、控制和支持层}
统一的服务虚拟、控制和支持层的主要任务是组织物理设备层提供的大量节点信息，以便为不同的业务和应用类型提供服务。该层包括四个子层：虚拟连接层、虚拟独立服务单元层、服务协作层和服务控制层。
\par
\textbf{1、虚拟连接层}\par
虚拟连接层对物理设备层提供的所有节点进行连接组网，形成一个全局可路由、可快速定位、高扩展性的自组织网络，从而可在物理资源之间安全地交换数据。
\par
虚拟连接层的结构示意图如图~\ref{fig:linklayer}~所示。虚拟连接层采用基于地理位置信息编码的网络结构，包括局域管理层和连接层。局域管理层主要负责管理不同地理区域内的节点，或是根据链路状态组成的区域内的节点。局域管理服务器由其中的某个节点担任。连接层通过结构化~P2P~方式将所有节点组织连接起来。虚拟连接层的主要工作是负责对物理设备层所提供的节点进行准确路由和查询。在虚拟连接层中，地理位置信息的引入，保证了~P2P~网络中节点的区域聚集性，提高了虚拟连接层的可扩展性，降低了管理服务器的负载，提升了用户体验质量。
\par
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{supernova-linklayer.eps}
\caption{虚拟连接层的结构示意图}
\label{fig:linklayer}
\end{figure}
\par
如图~\ref{fig:linklayer}~所示，全局管理服务器是一个全局设备，每个新加入到服务虚拟化平台的节点都需要首先在全局管理服务器上注册，汇报其~IP~地址、地理位置以及相应的服务能力信息。事实上，服务虚拟化平台中的节点会周期性查询自身可提供的服务能力状况，并通过带宽和延迟探测方法探测网络中链路状况，向局域管理服务器汇报，局域管理服务器再向全局管理服务器汇报。全局管理服务器会对其收集到的信息进行分析和整合，并将分析结果返回给局域管理服务器，以便局域管理服务器进行服务分配计算时作出更好的决策。另外，节点会从系统中所有节点中选择一部分节点作为该节点的优先邻居节点，并且定时相互交换邻居信息。
\par
当服务请求到达时，全局管理服务器根据服务请求的目标地理区域信息，将该服务请求分派到某个局域管理服务器，局域管理服务器对该服务请求任务进行分析，计算出服务方式，并为所请求的服务返回合适的入口节点。
\par
\textbf{2、虚拟独立服务单元层}\par
虚拟独立服务单元层通过采用基于服务单元的属性封装模型，将单个节点提供的服务虚拟化为多个具有不同属性的服务单元。服务单元属性封装模型隐藏了不同硬件服务器设备之间的差异，提取出这些设备之间的共同特征并进行抽象，为上层提供统一的调用方式。在虚拟独立服务单元层中，服务单元即是最小粒度服务单位，是对节点物理资源、服务能力的封装和抽象。通常，基本服务单元只提供单一的功能，譬如存储、流化、计算等。另外，虚拟独立服务单元层还对网络链路状态进行探测，并将探测的信息作为节点属性进行封装。虚拟独立服务单元层位于虚拟连接层和服务协作层之间，通过利用虚拟连接层提供的接口进行通信，并对服务协作层开放管理接口。
\par
\textbf{3、服务协作层}\par
服务协作层，顾名思义，是对虚拟独立服务单元层提供的最小粒度服务单元进行组织协作，以为不同用户的不同需求、不同的服务类型以及不同的应用特征提供具有弹性能力的网络服务，同时屏蔽底层细节。服务协作层不仅要充分考虑不同服务单元的特征，还要兼顾底层网络的实时特征，以便进行有效的服务组织和协作。服务协作层使得能力结构能更好地配合实际硬件的分布状况，兼顾系统容错和负载均衡等多个指标，有效地提高系统服务性能。
\par
\textbf{4、服务控制层}\par
服务控制层对服务协作层进行屏蔽，为服务和应用层提供服务。因此，用户的服务和应用无需了解服务协作层的实现细节，仅通过服务控制层定义的服务接口即可提出需求，并从系统中获得服务。

\subsubsection{全局认知管理层}
服务虚拟化平台~SuperNova~的层次结构使各层之间得到很好的屏蔽，各层可以独立地扩展或改变而互不影响。因此，系统的兼容性和扩展性都非常好，然而，这种屏蔽和隔离也有它的缺点。由于各层之间缺乏了解和信息交流，缺乏全局知识，使得服务单元的调度和控制只能得到次优的结果。因此，在服务虚拟化平台~SuperNova~中引入了全局认知管理层，来承担网络服务管理器的功能，通过不断的观察和学习，以达到全局优化的实施结果。同时，使服务虚拟化平台~SuperNova~更好地理解和符合用户需求。
\par
通常，全局认知管理层可用一个单独的服务器来实现，其余各层通过开放的接口周期性地向全局认知管理层汇报当前状态、用户访问情况以及硬件设备情况等信息。全局认知管理平台根据所搜集的信息计算出不同用户账号下的文件访问情况和趋势、用户行为变化函数、硬件使用规则等行为特征，并反馈给服务协作层，使不同应用可以根据这个信息调整和优化其网络结构，均衡负载。另外，为每个物理设备建立马尔科夫模型，估计其在时域上的负载和能力变化状态，将该信息通知服务协作层，促进该层的进一步优化。
\subsubsection{服务和应用层}
服务和应用层是面向用户的层次结构，直接面向用户。用户应用提出服务需求，服务和应用层对该服务需求任务调用“统一的服务虚拟、控制和支撑层”的开放接口并执行。
\par
在服务虚拟化平台~SuperNova~中，统一的服务虚拟、控制和支撑层是系统的研究重点，而本文的开发工作主要集中在该层的服务控制层子层，以及全局认知管理层。

\subsection{编程架构}
如图~\ref{fig:supernova-biancheng}~所示，SuperNova~服务虚拟化平台的编程架构主要分为两个部分：全局管理服务器编程和局域管理服务器编程。全局管理服务器是面向用户的，在该层，用户通过命令行客户端或~Web Service~网页与系统进行交互，提出消息请求，然后经由~Mule ESB~消息框架进行相关的处理。如果用户的消息请求需交由局域管理服务器处理，则通过~Netty~异步通信机制与局域管理服务器通信，由局域管理服务器完成相应的请求。下面将详细介绍服务虚拟化平台~SuperNova~的编程架构中涉及的组件。
\par
\begin{figure}
\begin{flushright}
\includegraphics[height=\textheight]{supernova-biancheng.eps}
\caption{SuperNova服务虚拟化平台编程架构示意图}
\label{fig:supernova-biancheng}
\end{flushright}
\end{figure}
\par
\subsubsection{Boto}
Boto\cite{boto}~是一个~Python\cite{python}~包，它提供了访问~AWS~ 服务的接口，包括~Amazon S3、Amazon EC2、Amazon DynamoDB~ 等~AWS~ 服务。Boto~库提供了开放的~Python API~，且所有的服务客户端都采用相同的接口，以便在所有支持的服务上都提供一致的用户访问体验。Boto~库通过封装代码细节，提供简洁的接口，大大简化了代码的编写，降低了编程复杂性，提高了代码复用率。
\par
在~SuperNova~的工程开发工作中，我们使用~Boto~库来与~AWS EC2~建立连接，根据业务需求发送定制的~HTTP~请求并获取响应。

\subsubsection{GWT}
Ajax\cite{ajax}，是由~XHTML、CSS、JavaScript、XMLHttpRequest、XML~等技术组合而成的~Web~应用开发领域的热门技术，用于创建更加动态和交互性更好的~Web~ 应用程序，提升用户的浏览体验。然而，Ajax~应用的开发和调试是非常繁复的，由于没有合适的开发工具辅助支持~Ajax~应用的开发和调试，使得~Ajax~应用的开发和调试过程很困难。与此相反，Java\cite{java}~语言作为企业应用开发的主流语言，有各种各样开发工具的支持，如~Eclipse、NetBeans~等，其开发和调试过程变得非常简单。
\par
GWT\cite{gwt}~是~Google~推出的~Ajax~应用开发包，支持开发者使用~Java~语言开发~Ajax~应用，能够将~Java~语言开发的应用转化为~Ajax~ 应用。GWT~ 解决了~Ajax~应用开发中开发工具缺失的难题，开发者可以充分利用~Java~ 语言的开发优势，降低~Ajax~应用开发的难度，加快~Ajax~应用的开发速度。因此，可充分发挥~Ajax~技术的优势，创建更加动态和交互性更好的~Web~应用程序，提升用户的浏览体验。使用~GWT~ 开发的~Java~应用将由~GWT~开发包提供的编译工具编译后生成对应的、应用了~Ajax~技术的~Web~应用，Java~应用中和服务器之间的交互动作也被自动生成的异步调用代码所代替。
\par
GWT~支持将~Java~语言开发的应用转化为~Ajax~应用，并提供了更多的高级特性：
\par\textbf{1、GWT~编译器}\par
GWT~编译器是~GWT~开发工具包的核心，负责将~Java~代码翻译成~Ajax~ 内容。GWT~编译器能够翻译~Java~语言的大部分特性，包括支持~Java~语言中的基本类型，支持~java.lang\cite{java.lang}~包和~java.util\cite{java.util}~ 包中的大部分类和接口，支持正则表达式和序列化。
\par\textbf{2、跨平台支持}\par
GWT~提供了很多的组件元素，如~Button、VerticalPannel~等，GWT~编译器能够将这些组件翻译成浏览器内置的类型，使得由~GWT~编译生成的~Ajax~应用能够支持大部分的浏览器和操作系统，如~Internet Explorer、Firefox~等浏览器和~Linux、Windows~等操作系统。
\par\textbf{3、宿主模式}\par
宿主模式是指我们和~GWT~应用交互的状态。当我们开发和调试时，我们就处于宿主模式下。此时，Java~虚拟机使用~GWT~内置的浏览器运行~GWT~应用编译后的~class~内容，因此能够提供“编码、测试、调试”过程的最佳速度。
\par\textbf{3、Web模式}\par
Web~模式是指我们和成功转换的~Ajax~应用的交互状态。此时，GWT~应用已经成功编译转换为~Ajax~应用了，我们可以使用~Web~方式来访问~Ajax~应用了，因此，不再需要~GWT~工具包或者~JVM\cite{jvm1,jvm2}~ 虚拟机的支持了。


\subsubsection{Jetty}
Jetty\cite{jetty}~是一个开源的~servlet~容器。Jetty~为基于~Java~ 的~Web~内容提供运行环境。Jetty~使用~Java~语言编写，以~JAR~包的形式对外发布开放的~API。开发人员可以将~Jetty~容器实例化成一个对象，可以迅速为一些独立运行的~Java~应用提供网络和~Web~连接。通常，Jetty~可通过~XML~文件或者~API~接口进行配置。另外，Jetty~ 可作为嵌入式服务器。

\subsubsection{Mule}
Mule~是由~Mulesoft\cite{mulesoft}~推出的开源轻量级的~ESB~企业服务总线消息框架。Mule~ 的核心概念是~SEDA，即分阶段和事件驱动。分阶段指的是将一个复杂的处理过程分解成几个不同的阶段，可以由不同的线程分别进行处理；事件驱动意味着所有的处理过程都是基于事件驱动和异步通信模式。
\subsubsection{JiBX}
JiBX\cite{jibx}~是对~XML~数据和~Java~对象进行绑定的工具框架。JiBX~通过绑定定义文档来定义~XML~数据与~Java~对象间的绑定和转换规则，绑定定义文档是联系~XML~数据与~Java~对象之间的桥梁。在~JiBX~ 中，通过~marshal~绑定，可由~Java~对象生成~XML~数据文档；通过~unmarshal~绑定，可根据~XML~数据文档建立~Java~对象。
\subsubsection{JDBC}
JDBC\cite{jdbc}~即~Java~数据库连接，是标准的~Java API~接口集合，用于访问数据库。JDBC~对数据库的操作与具体的数据库类型无关，它是一种规范，提供了一套完整而统一的编程接口，使开发人员可以使用纯~Java~的方式来连接并操作任意类型的数据库。如图~\ref{fig:jdbc}~所示为~JDBC~的体系架构示意图。从图中可以看出，JDBC~由两层组成：
\begin{figure}[h]
\centering
\includegraphics[width=0.8\textwidth]{jdbc.eps}
\caption{JDBC~的体系架构示意图}
\label{fig:jdbc}
\end{figure}
\par
1、JDBC API\par
JDBC API~使用一个驱动程序管理器和数据库特定的驱动程序，从而提供透明的异构数据库的连接。因此，应用程序可直接使用~JDBC API~完成数据库相关的操作，而无需了解特定的数据库细节。
\par
2、JDBC Driver API\par
JDBC Driver API~用于支持~JDBC~管理器，确保使用正确的驱动程序来访问每个数据源的~JDBC~驱动程序管理器。驱动程序管理器能够支持多个并发连接到多个异构数据库的驱动程序。

\subsubsection{Netty}
Netty\cite{netty}~是由~JBOSS\cite{jboss}~提供的一个~Java~开源框架。Netty~ 提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。因此，Netty~是基于~NIO~的客户、服务器端编程框架，使用~Netty~可以确保快速和简单的开发出一个网络应用，例如实现了某种协议的客户、服务端应用。Netty~ 简化和流线化了网络应用的编程开发过程。

\subsubsection{Axis2C}
Axis2C\cite{axis2c}~是基于~Axis2~架构，用~C~语言实现的~Web Service~引擎，具有良好的可移植性，可作为其他应用的子模块来提供~Web~服务。Axis2C~ 支持~SOAP~协议，也支持~RESTful~风格的~Web~服务。用户可以基于 ~Axis2C~开发~Web~服务提供给其他客户端调用，也可通过调用~Axis2C~ 提供的~C~语言库，开发客户端程序，访问其他的~Web~服务。
\subsubsection{WSDL2C}
Axis2C~提供了~WSDL2C~工具，可根据~WSDL~语言编写的用于描述整个~Web Service~的~XML~数据文档，生成~C~语言描述的~Axis2C~的服务器~Stub。因此，WSDL2C~相当于翻译机，将~XML~语言翻译为~C~语言。WSDL~是~Web~服务描述语言，可精确地描述~Web~服务。WSDL~的文档结构图如图~\ref{fig:wsdl}~所示，通常，WSDL~文档的包含以下几个重要的元素：\par
1、Types：数据类型定义的容器，通常使用某种类型系统，如~XML Schema~中的类型系统。
\par
2、Message：通信消息的数据结构的抽象类型化定义。使用~Types~所定义的类型来定义整个消息的数据结构。
\par
3、Operation：对服务中所支持的操作的抽象描述，可准确描述一个访问入口的请求和响应消息对。
\par
4、Binding：特定端口类型的具体协议和数据格式规范的绑定。
\par
5、Port：服务访问点，是一个协议/数据格式绑定与具体~Web~访问地址的组合。
\par
6、PortType：服务访问点类型。描述了某个访问入口点类型所支持的操作的抽象集合。\par
7、Service：由相关的服务访问点集合所组成的~Web~服务。
\par
\begin{figure}[h]
\centering
\includegraphics[width=textwidth]{wsdl.eps}
\caption{WSDL~文档结构图}
\label{fig:wsdl}
\end{figure}
\section{业务流量隔离和控制模块}
\label{sec:supernova-tc}
\subsection{流量控制简介}
如图\ref{fig:tc}和图\ref{fig:supernova-tc}所示，~SuperNova~中的业务流量隔离和控制模块主要应用在局域管理服务器上，并将流经局域管理服务器的流量划分为~outer~数据流量和~inner~数据流量两大部分。通常，inner~数据流量是指用户部署的业务内部之间的相互通信产生的数据流量，而~outer~流量则是外部终端用户通过~Internet~对该业务的访问流量。根据~outer~外部流量的特征，我们又进一步预设了~5~ 个不同优先级的类别，用户可根据业务需求选择其中的若干个进行配置以提供自定义的流量控制方案。在系统层面，业务流量隔离和控制模块通过隔离不同用户之间的数据流量，屏蔽了不同用户的数据流量干扰。在用户层面，业务流量隔离和控制模块根据用户需求区分对待用户的不同业务流量，避免业务之间的数据流量干扰。
\begin{figure}[h]
\centering
\includegraphics[width=0.9\textwidth]{supernova-tc.eps}
\caption{SuperNova中的流量控制模块}
\label{fig:supernova-tc}
\end{figure}
\subsection{编程架构}
如图\ref{fig:tc-biancheng}所示，SuperNova~中业务流量隔离和控制模块的编程架构示意图。图中自上而下展示了整个开发过程，并明确标出了需要添加或修改的文件。首先，用户提出请求“我想启动业务流量隔离和控制模块”。请求的方式包括命令行工具和~Web Service~两种。在命令行工具下，需要编写~Python~代码~setuptrafficcontrol.py~，调用~Boto~ 库与~AWS EC2~建立连接，发送请求消息并等待响应。在~Web~方式下，编写~GWT Java~代码，包括用户界面~EucalyptusWebInterface.java~文件，异步调用代码~EucalyptusWebBackend.java，EucalyptusWebBackendAsync.java，
EucalyptusWebBackendImpl.java~，以及功能实现~TrafficController.java~等文件。
\begin{figure}
\centering
\includegraphics[height=\textheight]{tc-biancheng.eps}
\caption{SuperNova中流量控制模块编程架构示意图}
\label{fig:tc-biancheng}
\end{figure}
\par
无论是采用命令行方式还是~Web Service~方式，访问请求消息都会进入到~Mule~组件中。Mule~组件根据消息类型，将消息导向不同的~Mule Component~组件进行处理。对于业务流量隔离和控制模块，主要的~Mule Component~是~TrafficControlEndpoint.java~所实现的~TrafficControlEndpoint~组件，根据~msgs-binding.xml~中的配置定义，该组件接受所有关于流量隔离控制的消息，包括~SetupTrafficControlType，StopTrafficControlType，ConfigTrafficControlType~等消息。在~Mule~组件~TrafficControlEndpoint~中，还存在与内存数据库表的交互。内存数据库表的数据是在系统空闲时，全局管理服务器从所有局域管理服务器收集的缓存数据，具有快速访问获取的特点。
\par
如果用户的请求需要局域管理服务器进行处理，则通过~Netty~框架实现全局管理服务器和局域管理服务器的异步通信，全局管理服务器将请求消息传给局域管理服务器，局域管理服务器在处理结束后把结果异步地返回给全局管理器。在局域管理服务器中，通过~WSDL Web~服务描述文件定义数据类型以及操作类型，如~supernova-cc.wsdl，再通过~Axis2C~的工具~WSDL2C~将其转换为~C~语言定义的代码，进而调用具体的功能实现函数，如文件~TrafficControl.cpp~中定义的函数。
\par
\subsection{功能和实现}
\subsubsection{启动}
启动业务流量隔离和控制模块的方式有两种：
\par\textbf{1）命令行方式}\par
启动终端工具，在终端输入命令：euca-setup-trafficcontrol，即可启动业务流量隔离和控制模块。
\par\textbf{2）Web~方式}\par
如图\ref{fig:euca-setup}所示，点击并勾选~Traffic Control~复选框，通过“保存簇配置”使配置生效，即可启动业务流量隔离和控制模块。
\par
\begin{figure}[h]
\centering
\includegraphics[width=0.95\textwidth]{euca-setup.eps}
\caption{Web~方式启动业务流量隔离和控制模块}
\label{fig:euca-setup}
\end{figure}
\par
不管是采用命令行方式，还是采用~Web~方式，都可以很容易地启动业务流量隔离和控制模块。事实上，如果系统从来没有启动过业务流量隔离和控制模块，则该模块会从系统配置文件中读取默认的业务流量隔离和控制参数，以实现如图\ref{fig:tc} 所示的流量控制架构。相反，如果系统曾经启动过业务流量隔离和控制模块，并重新进行过相应的配置和规则修改，这些新的规则都会被保存下来。当用户再次启动业务流量隔离和控制模块时，会自动恢复到用户最后一次修改后的最新规则。这种设计方式更加符合用户的行为习惯，能够减轻用户繁复的配置操作负担，提高用户体验质量。

\subsubsection{查询}
查询包括查询系统是否启动了业务流量隔离和控制模块，还包括查询系统已启动的业务流量控制规则。可通过命令euca-describe-trafficcontrol 进行，如图~\ref{fig:euca-describe}~所示。实际上，查询操作是直接在全局管理服务器上开展的。因此，在~SuperNova~流量控制模块编程架构~\ref{fig:tc-biancheng}~中，查询消息在经过~Mule~组件后，便终止了消息传递。这是因为在~SuperNova~系统的全局管理服务器中，存在内存数据库表，其中缓存了相关的流量控制规则。因此，流量控制规则的查询无需向局域管理服务器发出请求，可直接从内存数据库表中查询数据。这种设计是典型的以空间换取时间，牺牲一定的存储空间以达到快速响应，从而提高用户体验质量。另外，查询消息不需要再传递到各个局域管理服务器，从而屏蔽了网络的不确定性带来的不稳定性能损失。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{euca-describe.eps}
\caption{查询流量控制规则}
\label{fig:euca-describe}
\end{figure}
\par
\subsubsection{配置}
配置流量控制规则可通过命令：euca-config-trafficcontrol~进行，该命令功能强大，有很多参数可供选择以对已启动的流量隔离和控制模块进行微调和重新配置，主要的参数如表~\ref{tab:config}~所示。在配置流量规则时，一方面，要修改全局管理服务器的内存数据库表信息以记录最新的配置信息并保持系统的一致性；另一方面，要将配置消息传递到局域管理服务器以执行真正的修改和重配置，从而使新的配置生效。

\subsubsection{取消}
取消业务流量隔离和控制模块可以通过以下两种方式：
\par\textbf{1）命令行}\par
直接在终端输入命令：euca-stop-trafficcontrol，即可取消并停止业务流量隔离和控制模块。
\par\textbf{2）Web~方式}\par
如图~\ref{fig:euca-stop}~所示，在~Web~页面上点击并取消~Traffic Control~复选框的勾选，通过“保存簇配置”使配置生效，即可取消并停止业务流量隔离和控制模块。
\par
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{euca-stop.eps}
\caption{Web~方式取消业务流量隔离和控制模块}
\label{fig:euca-stop}
\end{figure}

\section{虚拟网络嵌入模块}
\label{sec:supernova-vne}
SuperNova~服务虚拟化平台上的虚拟网络嵌入模块是基于本文第~\ ref{chap:vne}~章所述的~MSO-VNE~算法，进行工程简化并编程开发实施的。下面将详细描述在~SuperNova~上的虚拟网络嵌入模块的工程实现。
\subsection{工程设计}
\subsubsection{算法简化}
在第~\ref{chap:vne}~章所述的~MSO-VNE~算法中，我们做了如下假设：
\par 1）链路的特征是可测量的\par
\par 2）Internet~链路带宽是无限的\par
然而，这两条假设在实际生活中都是不成立的。首先，网络是非常复杂的，它受各种各样的因素影响，包括线路材质、温度等气候条件。通常，这些因素中，任何一个因素的微小变化都会使网络链路特性发生本质的变化。因此，网络链路充满了不确定性，链路特征是很难测量的，尤其是延迟、延迟抖动等参数。正是由于网络的复杂性和不确定性，任何涉及到网络链路的特征的假设都是不符合实际的。对于~Internet~互联网而言，其庞大的规模更是加重了这种不确定性和复杂性。所以，上述两条假设在现实生活中都是不成立的。
\par
工程开发实施与理论算法研究不同，工程开发实施必须在准确性和可实现性之间折衷考虑，可以视实际情况牺牲一方而加强另一方。在~SuperNova~服务虚拟化平台中，对虚拟网络嵌入模块，我们可牺牲准确性以获得较高的可实现性。在进行实际的虚拟网络嵌入匹配计算时，我们只考虑节点的属性特征匹配，而忽略链路的属性特征匹配。一方面，这种简化使得工程开发较容易实现；另一方面，这种简化使得系统能快速响应用户的服务部署请求。

\subsubsection{编程简化}
如图~\ref{fig:supernova-vne-new}~所示，我们对~SuperNova~中的虚拟网络嵌入模块进行了编程简化，主要通过构建开发独立于~SuperNova~服务虚拟化平台的虚拟网络嵌入模块实现。该模块接受用户的请求，通过开放的编程接口~API~从~SuperNova~服务虚拟化平台获取可用的资源信息，在模块中进行虚拟网络嵌入匹配计算，如果成功映射，则使用开放的接口~API~将用户的请求部署到~SuperNova~服务虚拟化平台中。
\par
\begin{figure}[h]
\centering
\includegraphics[width=0.7\textwidth]{supernova-vne-new.eps}
\caption{SuperNova中虚拟网络嵌入模块结构}
\label{fig:supernova-vne-new}
\end{figure}
\par
在~SuperNova~服务虚拟化平台中，虚拟网络嵌入模块的编程实现不同于流量控制模块的编程实现，对比图~\ref{fig:supernova-vne-new}~和图~\ref{fig:tc-biancheng}~，我们可以看出，虚拟网络嵌入模块的编程架构比流量控制模块的编程架构要简明得多，编程实现和开发流程也要简洁明了很多，这种简洁明了的编程开发使得其可扩展性很强。如果我们提出了新的虚拟网络嵌入算法，只需要修改图~\ref{fig:supernova-vne-new}~ 中的虚拟网络嵌入模块，而无需改动SuperNova平台中的一行代码。
\par
与流量控制模块不同，SuperNova~中的虚拟网络嵌入模块是独立于~SuperNova~系统的，它通过~SuperNova~服务虚拟化平台开放的~API~接口从系统获取必要的信息、与系统进行必要的交互并反馈处理结果。这里涉及到的开放~API~接口主要包括：
\par\textbf{1）euca-describe-availability-zones \textit{verbose}}\par
euca2ools~命令~euca-describe-availability-zones  \textit{verbose}~用于获取~SuperNova~系统的资源信息，包括~cpu~的最大值（max），cpu~的可用值（free），ram~的最大值（max），ram~的可用值（free），以及~disk，cluster zone~等信息，如图~\ref{fig:verbose}~所示。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{verbose.eps}
\caption{由API查询的系统信息}
\label{fig:verbose}
\end{figure}
\par
SuperNova~的虚拟网络嵌入模块将该命令获取的系统资源信息和用户的请求进行匹配计算。若系统有丰富的资源，足以支撑部署用户的请求和业务，便通过以下开放的~API~接口在~SuperNova~系统中部署业务。

\par\textbf{2）euca-run-instances \textit{param}}\par
euca2ools~命令~euca-run-instances \textit{param}~用于部署业务。用户提出虚拟网络请求后，如果~SuperNova~系统有丰富的资源，足以支持用户的请求在系统中部署，则虚拟网络请求会成功映射，即虚拟网络请求中每个虚拟节点和虚拟链路都能匹配映射到实际的物理节点和物理链路上。成功映射后，可使用~euca-run-instance~接口进行真正的业务部署，以分配实际的物理资源。
\subsection{开发实现}
\begin{figure}[h]
\centering
\includegraphics[width=0.7\textwidth]{vne-liucheng.eps}
\caption{SuperNova中虚拟网络映射模块的实现流程}
\label{fig:vne-liucheng}
\end{figure}
\par
如图~\ref{fig:vne-liucheng}~所示，SuperNova~服务虚拟化平台中虚拟网络嵌入映射的关键处理步骤包括：\par
1）当用户发起请求时，虚拟网络映射开始；\par
2）虚拟网络映射模块首先对用户的请求进行预处理，生成系统可方便处理的格式；\par
3）虚拟网络映射模块从~SuperNova~系统获取系统可用的资源，包括~CPU~，内存，磁盘等信息；\par
4）将系统的可用信息和用户的请求进行虚拟网络嵌入映射，并将映射结果反馈给用户；\par
5）若系统有足够的资源支撑用户的请求，映射成功后，使用系统开放的部署API将用户的请求部署到系统中；\par
6）第4）步映射失败以及第5）步部署完成都会结束虚拟网络映射。
\subsection{功能接口}
SuperNova~服务虚拟化平台中，虚拟网络映射的部署接口~API~为：
\par
\textbf{euca-vne-deploy \textit{params}}
\par
该~euca2ools~命令通过调用~Boto~库接口与~AWS EC2~建立连接，进行用户认证，根据用户的请求，结合系统可用的资源进行虚拟网络嵌入匹配计算和映射处理，成功映射的虚拟网络请求会被分配实际的物理资源，从而为终端用户提供服务。该命令的具体参数如表~\ref{tab:deploy-vne}~所示。
\begin{table}[h]
\centering
\begin{tabular}{|c|c|c|}
\hline
参数 & 缩写 & 描述\\\hline
node-num & n & 虚拟节点的数量 \\\hline
life-time & l & 虚拟网络请求的生存时间，分钟\\\hline
cpu & c &~CPU~资源的需求量 \\\hline
ram & r &~RAM~资源的需求量，MB\\\hline
disk & d & DISK资源的需求量，MB\\\hline
prefer-cluster&p&用户希望部署的集群区域\\\hline
help & h & 显示帮助信息\\\hline
example & \multicolumn{2}{|c|}{euca-vne-deploy -n 1 -l 2 -c 1 -r 128 -d 5 -p 1}\\\hline
\end{tabular}
\caption{euca-deploy-vne~的参数说明}
\label{tab:deploy-vne}
\end{table}

\section{云控制器模块}
\label{sec:supernova-other}
\subsection{云控制器简介}
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{supernova-quanju.eps}
\caption{云控制器在~SuperNova~中的位置}
\label{fig:supernova-quanju}
\end{figure}
如图~\ref{fig:supernova-quanju}~所示，云控制器隶属于~SuperNova~ 服务虚拟化平台的全局认知管理平台，是用户对其部署在~SuperNova~平台上的业务服务的管理入口。通过云控制器，用户可查询已部署的业务，也可以阐述业务需求，并请求系统提供服务，还可以管理已部署的业务，包括虚拟实例、存储组件、安全组等的管理。
\subsection{功能完善}
对~SuperNova~服务虚拟化平台的功能完善工作主要是在已有的~euca2ools~命令行客户端工具基础上，对已有的管理操作进行重编码，省去对~euca2ools~客户端命令的解析，直接采用~Web Service~工作方式。这样做的好处有以下两点：\par
1、简化代码处理流程。\par
在~SuperNova~服务虚拟化平台中，euca2ools~客户端命令的对应的代码代码处理流程如下：首先，用户在终端输入~euca2ools~客户端命令；然后，euca2ools对该命令进行解析，并转换为以~Web Service~方式呈现的请求消息；最后，将请求消息传递给~Mule~组件进行进一步的处理。我们对这个处理流程的改进是删除其中第~2~个步骤的解析和转换工作，简化代码处理流程。我们通过~GWT~框架，直接构建~Web~页面，用户通过在该~Web~ 页面上简单地点击便以~Web Service~的方式生成请求消息，从而简化了代码处理流程。
\par
2、提高用户体验\par
SuperNova~服务虚拟化平台最终要面向用户提供服务，因此，平台的用户体验质量是至关重要的。我们通过对云控制器进行可视化改进，使得用户不再需要面对非常不人性化的终端屏幕，也不再需要输入繁复易错的命令。而是通过在~Web~页面上进行直观的点选操作就可以完成同样的功能，是对用户操作的一种人性化设计，可很好地提高用户体验。
\subsubsection{实例管理}
在~SuperNova~服务虚拟化平台中，虚拟实例的管理包括查询已经创建的虚拟实例，对已存在的虚拟实例进行重启、终止操作，以及重新创建并启动新的实例。如图~\ref{fig:describe-instance}~所示，在~Web~页面的~Instance~选项卡下的~Available Instances~显示当前用户所创建的实例，用户可对他们进行相应的操作，包括~Terminate~和~Reboot~。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{describe-instance}
\caption{Available Instance}
\label{fig:describe-instance}
\end{figure}
\par
如图~\ref{fig:run-instance}~所示，Instance~选项卡下的~Run Instance~允许用户指定相应的参数以创建用户希望的虚拟实例。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{run-instance}
\caption{Run Instance}
\label{fig:run-instance}
\end{figure}
\par
其中的参数含义如表~\ref{tab:run-instance}~所示。
\begin{table}[h]
\centering
\begin{tabular}{c|c}
\hline
参数 & 描述 \\\hline
count & 需要创建的虚拟实例的数量，默认是1 \\\hline
security group & 虚拟实例所属的安全组，默认是default \\\hline
key & 公钥名称 \\\hline
address & 虚拟实例的地址（可选）\\\hline
instanceType & 虚拟实例的类型\\\hline
zone & 虚拟实例所属的局域管理服务器 \\\hline
kernel & kernel内核镜像\\\hline
ramdisk & ramdisk镜像\\\hline
imagId & 镜像Id\\\hline
\end{tabular}
\caption{创建虚拟实例的参数说明}
\label{tab:run-instance}
\end{table}

\subsubsection{存储管理}
在~SuperNova~服务虚拟化平台中，存储组件包括镜像（Images），存储卷（Volume）和存储卷快照（Snapshot）。因此，存储管理即是对相关组件的管理。对于镜像~Images~的管理，其~Web~界面如图~\ref{fig:supernova-image}~所示。Storage~下的~Images~选项卡展示了可用的~Images~以及相关的操作，包括~Disable~或~Enable。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{supernova-image.eps}
\caption{SuperNova~服务虚拟化平台的~Images}
\label{fig:supernova-image}
\end{figure}
\par
如图~\ref{fig:supernova-volume}~所示，Storage~下的~Volumes~选项展示了可用的~Volume~和相应的挂载和卸载情况以及对应的操作，包括删除、卸载、挂载。同时，用户可以通过指定~Volume~的空间大小，快照~Id~和集群管理器以创建新的~Volume；也可以把存在的存储卷和虚拟实例关联起来，即存储卷的挂载。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{supernova-volume.eps}
\caption{SuperNova~服务虚拟化平台的~Volumes}
\label{fig:supernova-volume}
\end{figure}
\par
如图~\ref{fig:supernova-snapshot}~所示，Storage~下的~Snapshots~ 是对存储卷~Volume~进行相应的备份快照。与~Snapshot~相关的操作包括创建指定~Volume~的~snapshot~以及删除指定的~snapshot~。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{supernova-snapshot.eps}
\caption{SuperNova~服务虚拟化平台的~Snapshots}
\label{fig:supernova-snapshot}
\end{figure}
\subsubsection{安全组管理}
Security Groups，网络安全组，相对于防火墙，它对流入实例的流量进行控制和管理。一个安全组可以有多个实例与之关联，同样，一个实例可以关联到多个安全组。通过安全组的规则可以控制到达实例的入境流量，只有符合实例关联的安全组的规则的入境流量才能进入到实例中，其他的任何入境流量都将被丢弃。安全组的规则可以在任何时刻对其进行修改，修改之后，新的安全组规则将自动地应用到与安全组相关联的所有实例中。
\par
在~SuperNova~中，有默认的安全组~default。在启动实例时，可以显式地为实例指定安全组，否则该实例将关联到默认的安全组。默认安全组的初始设置如下：\par
1）不允许入境流量；\par
2）允许所有的出境流量；\par
3）允许关联到安全组的实例之间相互通信。\par
用户可以使用如表~\ref{tab:security}~所示的~euca2ools~命令来创建新的安全组，或修改安全组的规则，或删除安全组等。
\begin{table}[h]
\begin{tabular}{c|c|c}
\\\hline
操作类型 & euca2ools命令 & 描述 \\\hline
创建安全组 & ec2-create-group & 用当前账户创建新的安全组 \\\hline
描述安全组 & ec2-describe-group & 描述与账户相关的安全组信息\\\hline
添加安全组规则 & ec2-authorize & 向指定安全组添加一个或多个规则\\\hline
移除安全组规则 & ec2-revoke & 从指定安全组中移除一个或多个规则\\\hline
删除安全组 & ec2-delete-group & 删除和账户关联的安全组\\\hline
\end{tabular}
\caption{安全组相关的操作和~euca2ools~命令}
\label{tab:security}
\end{table}
\par
在~SuperNova~服务虚拟化平台中，安全组相关的~Web~界面如图~\ref{fig:security}~所示。在~SecurityGroups~选项卡中，我们可以使用~Add a new Group~创建新的安全组，对已经存在的安全组，可以使用点击~Authorize~添加安全组规则，或通过~Revoke~移除安全组规则，或通过~Delete~完全删除安全组。
\begin{figure}[h]
\centering
\includegraphics[width=\textwidth]{security.eps}
\caption{SuperNova~中的安全组}
\label{fig:security}
\end{figure}

\section{小结}
\label{sec:supernova-conclude}
本章详细阐述了在~SuperNova~服务虚拟化平台上开展的工程开发工作，主要包括三大部分：业务流量隔离和控制模块的工程开发实现，虚拟网络嵌入模块的工程开发实现，云控制器模块的功能完善。
\par
本章首先详细介绍~SuperNova~服务虚拟化平台，包括系统架构和编程架构。然后，本章对~SuperNova~服务虚拟化平台的业务流量隔离和控制模块的工程开发实现进行详尽的阐述，包括该模块在~SuperNova~中的位置、实现方式、编程实现架构、功能接口以及使用方式。在~SuperNova~ 服务虚拟化平台中实现业务流量隔离和控制模块，可有效隔离屏蔽不同的业务流量，并根据业务数据的~QoS~特征，区分不同的数据流量，并提供有~QoS~保障的服务。另外，对于具体的业务数据，用户可根据其数据流量特征，进行自定义配置，以提高服务质量，达到更好的服务效果。
\par
对于~SuperNova~服务虚拟化平台的虚拟网络嵌入模块，本章主要从工程设计、开发实现和功能接口这三个方面进行阐述。由于虚拟网络嵌入问题是~NP~难问题，时间复杂度非常高，而工程实现需要在准确性和可实现性上寻求折衷平衡，以提高工程效率和系统性能，进一步提高用户体验质量。因此，我们对~SuperNova~服务虚拟化平台的虚拟网络嵌入模块进行相应的工程简化设计，在开发实现时，充分考虑了时间空间性能以及系统扩展性。
\par
另外，本章为提高~SuperNova~服务虚拟化平台的用户体验质量，对全局认知管理层的云控制器进行相应的功能完善和补充。主要包括对部分~euca2ools~命令的可视化改进，如实例管理、存储管理、安全组管理等。对系统而言，可视化改进大大简化了代码处理流程，提高了系统的效率和性能。对用户而言，可视化的操作方式让用户从繁复的终端命令行中解放出来，显著提高了用户体验质量。
